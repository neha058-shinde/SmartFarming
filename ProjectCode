#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <linux/i2c-dev.h>

#define RTC_DEVICE "/dev/rtc0"   // Adjust according to the RTC device file
#define I2C_DEVICE "/dev/i2c-2"   // Adjust according to the I2C bus used
#define RTC_ADDRESS 0x68         // I2C address of the RTC module

int main() {
    int rtc_file, i2c_file;
    struct tm rtc_time;

    // Open the RTC device file
    if ((rtc_file = open(RTC_DEVICE, O_RDONLY)) < 0) {
        perror("Failed to open RTC device file");
        exit(1);
    }

    // Read the current time from the RTC
    if (ioctl(rtc_file, RTC_RD_TIME, &rtc_time) < 0) {
        perror("Failed to read time from RTC");
        close(rtc_file);
        exit(1);
    }

    // Close the RTC device file
    close(rtc_file);

    // Open the I2C device file
    if ((i2c_file = open(I2C_DEVICE, O_RDWR)) < 0) {
        perror("Failed to open I2C device file");
        exit(1);
    }

    // Set the I2C slave address to the RTC module
    if (ioctl(i2c_file, I2C_SLAVE, RTC_ADDRESS) < 0) {
        perror("Failed to set I2C slave address");
        close(i2c_file);
        exit(1);
    }

    // Read the current time from the RTC module
    // (Assuming the RTC module provides time in BCD format)
    unsigned char rtc_data[7];
    if (read(i2c_file, rtc_data, sizeof(rtc_data)) != sizeof(rtc_data)) {
        perror("Failed to read time from RTC module");
        close(i2c_file);
        exit(1);
    }

    // Convert BCD format to integer format
    rtc_time.tm_sec = (rtc_data[0] & 0x0F) + ((rtc_data[0] >> 4) * 10);
    rtc_time.tm_min = (rtc_data[1] & 0x0F) + ((rtc_data[1] >> 4) * 10);
    rtc_time.tm_hour = (rtc_data[2] & 0x0F) + ((rtc_data[2] >> 4) * 10);
    rtc_time.tm_mday = (rtc_data[4] & 0x0F) + ((rtc_data[4] >> 4) * 10);
    rtc_time.tm_mon = (rtc_data[5] & 0x0F) + ((rtc_data[5] >> 4) * 10) - 1;
    rtc_time.tm_year = (rtc_data[6] & 0x0F) + ((rtc_data[6] >> 4) * 10) + 100;

    // Print the current time
    printf("Current time: %02d:%02d:%02d %02d/%02d/%04d\n",
           rtc_time.tm_hour, rtc_time.tm_min, rtc_time.tm_sec,
           rtc_time.tm_mday, rtc_time.tm_mon + 1, rtc_time.tm_year + 1900);

    // Close the I2C device file
    close(i2c_file);

    return 0;
}
